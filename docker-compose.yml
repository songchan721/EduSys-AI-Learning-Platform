version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: learning-platform-postgres
    environment:
      POSTGRES_DB: learning_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - learning-platform-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: learning-platform-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - learning-platform-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redpanda (Kafka-compatible)
  redpanda:
    image: redpandadata/redpanda:v23.3.3
    container_name: learning-platform-redpanda
    command:
      - redpanda
      - start
      - --kafka-addr
      - internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr
      - internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr
      - internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr
      - internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr
      - internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr
      - redpanda:33145
      - --advertise-rpc-addr
      - redpanda:33145
      - --smp
      - '1'
      - --memory
      - 1G
      - --mode
      - dev-container
      - --default-log-level=info
    ports:
      - "18081:8081" # Schema Registry
      - "18082:8082" # Pandaproxy
      - "19092:9092" # Kafka API
      - "19644:9644" # Admin API
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    networks:
      - learning-platform-network
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy|true'"]
      interval: 15s
      timeout: 10s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: learning-platform-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - learning-platform-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: learning-platform-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - learning-platform-network

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: learning-platform-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - learning-platform-network

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: learning-platform-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - learning-platform-network

  # Redpanda Console (Message Queue Monitoring)
  redpanda-console:
    image: redpandadata/console:latest
    container_name: learning-platform-redpanda-console
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKERS: redpanda:9092
      KAFKA_SCHEMAREGISTRY_ENABLED: true
      KAFKA_SCHEMAREGISTRY_URLS: http://redpanda:8081
      SERVER_LISTENPORT: 8080
    depends_on:
      - redpanda
    networks:
      - learning-platform-network

volumes:
  postgres_data:
  redis_data:
  redpanda_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  learning-platform-network:
    driver: bridge